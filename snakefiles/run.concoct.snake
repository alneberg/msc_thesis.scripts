import glob
import os

#configfile: "config.json"
configfile: "config_test.json"

PYTHON2 = config["python2"]

LENGTHS = config['lengths']
PCAS = config['pcas']
KMERS= config['kmers']
MATRICES=config['matrices']
DATASETS=config['datasets']
CUTUP=config['cutup']

N_CLUSTERS = config['n_clusters']


def all_cluster_runs(wildcards):
    if wildcards.cutup == "original":
        lengths = LENGTHS
    else:
        lengths = [l for l in LENGTHS if int(l)<int(wildcards.cutup)]
    return expand("results/{dataset}/{cutup}/{length}_{pca}_{kmer}_{matrix}/clustering_gt{length}.csv", length=lengths, pca=PCAS, kmer=KMERS, matrix=MATRICES, dataset=wildcards.dataset, cutup=wildcards.cutup)
 
rule cutup:
    input: "data/{dataset}/Contigs.fa",
    output: "data/{dataset}/{cutup}/Contigs.fa"
    params:
        concoct_scripts = config["concoct_scripts"]
    shell:
        """config["load_env"]
           python {params.concoct_scripts}/cut_up_fasta.py {input} \
            --chunk_size {wildcards.cutup} --overlap_size 0 -m > {output}
        """

rule concoct:
    input: "data/{dataset}/{cutup}/Contigs.fa"
    output: "results/{dataset}/{cutup}/{length}_{pca}_{kmer}_{matrix}/clustering_gt{length}.csv"
    params:
        concoct = config["concoct"],
    run:
        n_clusters = N_CLUSTERS[wildcards.dataset]
        outdir = "/".join(output[0].split('/')[0:-1]) + "/"
        shell("""{params.concoct} --composition_file {input} \
            -b {outdir} \
            --total_percentage_pca {wildcards.pca} \
            --clusters {n_clusters} \
            -k {wildcards.kmer} \
            --matrix_shape {wildcards.matrix} \
            -l {wildcards.length}
            """)

rule summarize_cluster_performance:
    input: all_cluster_runs
    output:
        "stats/{dataset}/{cutup}_clustering_perf.csv"
    shell:
        """touch {output}"""

rule summarize_cpu_memory:
    input: all_cluster_runs
    output:
        "stats/{dataset}/{cutup}_cpu_memory.csv"
    shell:
        """touch {output}"""

rule all:
    input:
        expand("stats/{dataset}/{cutup}_cpu_memory.csv", dataset=DATASETS, cutup=CUTUP),
        expand("stats/{dataset}/{cutup}_clustering_perf.csv", dataset=DATASETS, cutup=CUTUP)

